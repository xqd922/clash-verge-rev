name: Build Windows Unsigned

on:
  workflow_dispatch:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main]

permissions: write-all
env:
  CARGO_INCREMENTAL: 0
  RUST_BACKTRACE: short

jobs:
  build-windows:
    runs-on: windows-latest
    strategy:
      matrix:
        target: [x86_64-pc-windows-msvc, aarch64-pc-windows-msvc]

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Rust Stable
        uses: dtolnay/rust-toolchain@stable

      - name: Add Rust Target
        run: rustup target add ${{ matrix.target }}

      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: src-tauri
          cache-all-crates: true

      - name: Install Node
        uses: actions/setup-node@v4
        with:
          node-version: "22"

      - uses: pnpm/action-setup@v4
        name: Install pnpm
        with:
          run_install: false

      - name: Pnpm install and check
        run: |
          pnpm i
          pnpm check ${{ matrix.target }}

      - name: Tauri build (unsigned)
        run: pnpm build --target ${{ matrix.target }}
        env:
          NODE_OPTIONS: "--max_old_space_size=4096"

      - name: Get Version
        run: |
          $version = (Get-Content package.json | ConvertFrom-Json).version
          echo "VERSION=$version" >> $env:GITHUB_ENV
          echo "BUILDTIME=$(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')" >> $env:GITHUB_ENV

      - name: Upload Windows Installer
        uses: actions/upload-artifact@v4
        with:
          name: windows-${{ matrix.target }}-installer
          path: |
            src-tauri/target/${{ matrix.target }}/release/bundle/nsis/*.exe
          if-no-files-found: error

      - name: Upload Windows MSI
        uses: actions/upload-artifact@v4
        with:
          name: windows-${{ matrix.target }}-msi
          path: |
            src-tauri/target/${{ matrix.target }}/release/bundle/msi/*.msi
          if-no-files-found: ignore

      - name: Create Portable Version
        run: |
          $releaseDir = "src-tauri/target/${{ matrix.target }}/release"
          $configDir = "$releaseDir/.config"

          # 创建便携版标记
          New-Item -ItemType Directory -Force -Path $configDir
          New-Item -ItemType File -Force -Path "$configDir/PORTABLE"

          # 创建便携版zip
          $version = (Get-Content package.json | ConvertFrom-Json).version
          $arch = if ("${{ matrix.target }}" -eq "x86_64-pc-windows-msvc") { "x64" } else { "arm64" }
          $zipName = "Clash.Verge_${version}_${arch}_portable.zip"

          Compress-Archive -Path "$releaseDir/Clash Verge.exe", "$releaseDir/verge-mihomo.exe", "$releaseDir/verge-mihomo-alpha.exe", "$releaseDir/resources", "$configDir" -DestinationPath $zipName -Force

      - name: Upload Portable Version
        uses: actions/upload-artifact@v4
        with:
          name: windows-${{ matrix.target }}-portable
          path: "*.zip"
          if-no-files-found: ignore
